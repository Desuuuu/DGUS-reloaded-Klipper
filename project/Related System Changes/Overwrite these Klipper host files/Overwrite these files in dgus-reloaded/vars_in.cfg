[t5uid1_var __switch_page]
type: input
address: 0x2000
data_type: uint16
script: {% do switch_page(page_name(data)) %}

[t5uid1_var __switch_page_idle]
type: input
address: 0x2002
data_type: uint16
script:
  {% if not is_busy() %}
    {% do switch_page(page_name(data)) %}
  {% endif %}

[t5uid1_var __switch_page_printing]
type: input
address: 0x2003
data_type: uint16
script:
  {% if printer.t5uid1.is_printing %}
    {% do switch_page(page_name(data)) %}
  {% endif %}

[t5uid1_var __status_abort]
type: input
address: 0x2007
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% if data == t5uid1.constants.popup_confirmed %}
    {% if t5uid1.is_printing %}
      {% if 'virtual_sdcard' in printer and printer.virtual_sdcard.file_position != 0 %}
        CANCEL_PRINT
      {% else %}
        RESPOND TYPE=command MSG=action:cancel
      {% endif %}
    {% endif %}
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __status_pause]
type: input
address: 0x2008
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% if data == t5uid1.constants.popup_confirmed %}
    {% if t5uid1.is_printing and not printer.pause_resume.is_paused %}
      {% if 'virtual_sdcard' in printer and printer.virtual_sdcard.file_position != 0 %}
        PAUSE
      {% else %}
        RESPOND TYPE=command MSG=action:pause
      {% endif %}
    {% endif %}
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __status_resume]
type: input
address: 0x2009
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% if data == t5uid1.constants.popup_confirmed %}
    {% if t5uid1.is_printing and printer.pause_resume.is_paused %}
      {% if 'virtual_sdcard' in printer and printer.virtual_sdcard.file_position != 0 %}
        RESUME
      {% else %}
        RESPOND TYPE=command MSG=action:resume
      {% endif %}
    {% endif %}
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __adjust_set_feedrate]
type: input
address: 0x200a
data_type: int16
script:
  M220 S{data}
  {% do start_routine("trigger_full_update") %}
run_as_gcode: true

[t5uid1_var __adjust_set_flowrate]
type: input
address: 0x200b
data_type: int16
script:
  M221 S{data}
  {% do start_routine("trigger_full_update") %}
run_as_gcode: true

[t5uid1_var __adjust_set_offset]
type: input
address: 0x200e
data_type: int16
script:
  {% if "z" not in printer.toolhead.homed_axes %}
    {% do set_message("Homing required") %}
  {% else %}
    {% set offset = data|float / 10 ** 2 %}
    SET_GCODE_OFFSET Z={offset} MOVE=1
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __adjust_offset]
type: input
address: 0x200f
data_type: uint16
script:
  {% if "z" not in printer.toolhead.homed_axes %}
    {% do set_message("Homing required") %}
  {% else %}
    {% set t5uid1 = printer.t5uid1 %}
    {% if data == t5uid1.constants.adjust_increment %}
      SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1
      {% do start_routine("trigger_full_update") %}
    {% elif data == t5uid1.constants.adjust_decrement %}
      SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1
      {% do start_routine("trigger_full_update") %}
    {% endif %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __temp_preset]
type: input
address: 0x2010
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% if data == t5uid1.constants.preset_pla %}
    SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET={t5uid1.constants.temp_pla.hotend}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={t5uid1.constants.temp_pla.bed}
    {% do start_routine("trigger_full_update") %}
  {% elif data == t5uid1.constants.preset_abs %}
    SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET={t5uid1.constants.temp_abs.hotend}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={t5uid1.constants.temp_abs.bed}
    {% do start_routine("trigger_full_update") %}
  {% elif data == t5uid1.constants.preset_petg %}
    SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET={t5uid1.constants.temp_petg.hotend}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={t5uid1.constants.temp_petg.bed}
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __temp_set_target_bed]
type: input
address: 0x2011
data_type: int16
script:
  {% set max_temp = heater_max_temp("heater_bed", 10)|round|int %}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={[data, max_temp]|min}
  {% do start_routine("trigger_full_update") %}
run_as_gcode: true

[t5uid1_var __temp_set_target_h0]
type: input
address: 0x2012
data_type: int16
script:
  {% set max_temp = heater_max_temp("extruder", 15)|round|int %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={[data, max_temp]|min}
  {% do start_routine("trigger_full_update") %}
run_as_gcode: true

[t5uid1_var __temp_set_target_h1]
type: input
address: 0x2013
data_type: int16
script:
  {% if 'extruder1' in printer %}
    {% set max_temp = heater_max_temp("extruder1", 15)|round|int %}
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={[data, max_temp]|min}
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __temp_cool]
type: input
address: 0x2014
data_type: int16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% if data == t5uid1.constants.heater_all %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    {% if 'extruder1' in printer %}
      SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0
    {% endif %}
    {% do start_routine("trigger_full_update") %}
  {% elif data == t5uid1.constants.heater_bed %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
    {% do start_routine("trigger_full_update") %}
  {% elif data == t5uid1.constants.heater_h0 %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    {% do start_routine("trigger_full_update") %}
  {% elif data == t5uid1.constants.heater_h1 %}
    {% if 'extruder1' in printer %}
      SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0
      {% do start_routine("trigger_full_update") %}
    {% endif %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __stepper_control]
type: input
address: 0x2015
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% if data == t5uid1.constants.stepper_enable %}
    {% set steppers = ['stepper_x', 'stepper_y', 'stepper_z', 'extruder'] %}
    {% if 'extruder1' in printer %}
      {% do steppers.append('extruder1') %}
    {% endif %}
    {% for stepper in steppers %}
      SET_STEPPER_ENABLE STEPPER={stepper} ENABLE=1
    {% endfor %}
    {% do start_routine("trigger_full_update") %}
  {% elif data == t5uid1.constants.stepper_disable %}
    M18
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __level_offset_set]
type: input
address: 0x2016
data_type: int16
script:
  {% if "z" not in printer.toolhead.homed_axes %}
    {% do set_message("Homing required") %}
  {% else %}
    {% set offset = data|float / 10 ** 2 %}
    SET_GCODE_OFFSET Z={offset} MOVE=1
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __level_offset_step]
type: input
address: 0x2017
data_type: uint16
script:
  {% if "z" not in printer.toolhead.homed_axes %}
    {% do set_message("Homing required") %}
  {% else %}
    {% set t5uid1 = printer.t5uid1 %}
    {% set offset_steps = get_variable("offset_steps",
                                       t5uid1.constants['step_size_0.1']) %}
    {% if offset_steps == t5uid1.constants['step_size_0.1'] %}
      {% set step = "0.1" %}
    {% elif offset_steps == t5uid1.constants['step_size_0.01'] %}
      {% set step = "0.01" %}
    {% endif %}
    {% if data == t5uid1.constants.adjust_increment %}
      SET_GCODE_OFFSET Z_ADJUST={step} MOVE=1
      {% do start_routine("trigger_full_update") %}
    {% elif data == t5uid1.constants.adjust_decrement %}
      SET_GCODE_OFFSET Z_ADJUST=-{step} MOVE=1
      {% do start_routine("trigger_full_update") %}
    {% endif %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __level_offset_set_step]
type: input
address: 0x2018
data_type: uint16
script:
  {% do set_variable("offset_steps", data) %}
  {% do start_routine("trigger_full_update") %}

[t5uid1_var __level_manual_point]
type: input
address: 0x2019
data_type: uint16
script:
  {% if printer.toolhead.homed_axes != "xyz" %}
    {% do set_message("Homing required") %}
  {% elif is_busy() %}
    {% do set_message("Busy") %}
  {% else %}
    {% set hop = 5 %}
    {% set t5uid1 = printer.t5uid1 %}
    {% if data == 1 %}
      {% set x = (t5uid1.limits.x_max - t5uid1.limits.x_min + t5uid1.limits.x_min_inset - t5uid1.limits.x_max_inset) / 2 %}
      {% set y = (t5uid1.limits.y_max - t5uid1.limits.y_min + t5uid1.limits.y_min_inset - t5uid1.limits.y_max_inset) / 2 %}
    {% elif data == 2 %}
      {% set x = t5uid1.limits.x_min + t5uid1.limits.x_min_inset %}
      {% set y = t5uid1.limits.y_min + t5uid1.limits.y_min_inset %}
    {% elif data == 3 %}
      {% set x = t5uid1.limits.x_max - t5uid1.limits.x_max_inset %}
      {% set y = t5uid1.limits.y_min + t5uid1.limits.y_min_inset %}
    {% elif data == 4 %}
      {% set x = t5uid1.limits.x_max - t5uid1.limits.x_max_inset %}
      {% set y = t5uid1.limits.y_max - t5uid1.limits.y_max_inset %}
    {% elif data == 5 %}
      {% set x = t5uid1.limits.x_min + t5uid1.limits.x_min_inset %}
      {% set y = t5uid1.limits.y_max - t5uid1.limits.y_max_inset %}
    {% endif %}
    SAVE_GCODE_STATE NAME=state_level_manual_point
    G90
    {% if printer.gcode_move.gcode_position.z < hop %}
      G1 Z{hop} F600
    {% endif %}
    G1 X{x} Y{y} F4800
    G1 Z0.2 F300
    RESTORE_GCODE_STATE NAME=state_level_manual_point
  {% endif %}
run_as_gcode: true

[t5uid1_var __level_auto_probe]
type: input
address: 0x201a
data_type: none
script:
  {% if printer.toolhead.homed_axes != "xyz" %}
    {% do set_message("Homing required") %}
  {% elif is_busy() %}
    {% do set_message("Busy") %}
  {% elif 'bed_mesh' in printer %}
    BED_MESH_CALIBRATE
    G28 Z
    {% do start_routine("show_probing_screen") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __level_auto_disable]
type: input
address: 0x201b
data_type: none
script:
  {% if is_busy() %}
    {% do set_message("Busy") %}
  {% elif 'bed_mesh' in printer %}
    BED_MESH_CLEAR
    BED_MESH_PROFILE REMOVE=default
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __filament_select]
type: input
address: 0x201c
data_type: int16
script:
  {% do set_variable("filament_extruder", data) %}
  {% do start_routine("trigger_full_update") %}

[t5uid1_var __filament_set_length]
type: input
address: 0x201d
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% set extruder = get_variable("filament_extruder",
                                 t5uid1.constants.extruder_current) %}
  {% if extruder == t5uid1.constants.extruder_current %}
    {% set len = limit_extrude(printer.toolhead.extruder, data) %}
  {% elif extruder == t5uid1.constants.extruder_e0 %}
    {% set len = limit_extrude("extruder", data) %}
  {% elif extruder == t5uid1.constants.extruder_e1 %}
    {% set len = limit_extrude("extruder1", data) %}
  {% endif %}
  {% do set_variable("filament_length", len|round|int) %}
  {% do start_routine("trigger_full_update") %}

[t5uid1_var __filament_move]
type: input
address: 0x201e
data_type: uint16
script:
  {% if is_busy() %}
    {% do set_message("Busy") %}
  {% else %}
    {% set t5uid1 = printer.t5uid1 %}
    {% set extruder = get_variable("filament_extruder",
                                  t5uid1.constants.extruder_current) %}
    {% if extruder == t5uid1.constants.extruder_current %}
      {% set ext_name = printer.toolhead.extruder %}
    {% elif extruder == t5uid1.constants.extruder_e0 %}
      {% set ext_name = "extruder" %}
    {% elif extruder == t5uid1.constants.extruder_e1 %}
      {% set ext_name = "extruder1" %}
    {% endif %}
    {% if ext_name not in printer %}
      {% do set_message("Invalid extruder") %}
    {% elif printer[ext_name].temperature < heater_min_extrude_temp(ext_name) %}
      {% do set_message("Temperature too low") %}
    {% else %}
      SAVE_GCODE_STATE NAME=state_filament_move
      ACTIVATE_EXTRUDER EXTRUDER={ext_name}
      M83
      {% set length = get_variable("filament_length", 10) %}
      {% if data == t5uid1.constants.filament_retract %}
        G1 E-{length} F180
      {% elif data == t5uid1.constants.filament_extrude %}
        G1 E{length} F180
      {% endif %}
      RESTORE_GCODE_STATE NAME=state_filament_move
    {% endif %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __home]
type: input
address: 0x201f
data_type: uint16
script:
  {% if is_busy() %}
    {% do set_message("Busy") %}
  {% else %}
    {% set t5uid1 = printer.t5uid1 %}
    {% do set_variable("line1", "") %}
    {% do set_variable("line2", "Homing...") %}
    {% do set_variable("line3", "") %}
    {% do set_variable("line4", "") %}
    {% do set_variable("wait_return", t5uid1.page) %}
    {% if data == t5uid1.constants.axis_xyz %}
      G28 X Y Z
    {% elif data == t5uid1.constants.axis_xy %}
      G28 X Y
    {% elif data == t5uid1.constants.axis_z %}
      G28 Z
    {% endif %}
    {% do start_routine("show_wait_screen") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __move_x]
type: input
address: 0x2020
data_type: int16
script:
  {% if "x" not in printer.toolhead.homed_axes %}
    {% do set_message("Homing required") %}
  {% else %}
    {% set t5uid1 = printer.t5uid1 %}
    {% set pos = data|float / 1 ** 1 %}
    {% if pos < t5uid1.limits.x_min %}
      {% set pos = t5uid1.limits.x_min %}
    {% elif pos > t5uid1.limits.x_max %}
      {% set pos = t5uid1.limits.x_max %}
    {% endif %}
    SAVE_GCODE_STATE NAME=state_move_x
    G90
    G1 X{pos} F4800
    RESTORE_GCODE_STATE NAME=state_move_x
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __move_y]
type: input
address: 0x2021
data_type: int16
script:
  {% if "y" not in printer.toolhead.homed_axes %}
    {% do set_message("Homing required") %}
  {% else %}
    {% set t5uid1 = printer.t5uid1 %}
    {% set pos = data|float / 1 ** 1 %}
    {% if pos < t5uid1.limits.y_min %}
      {% set pos = t5uid1.limits.y_min %}
    {% elif pos > t5uid1.limits.y_max %}
      {% set pos = t5uid1.limits.y_max %}
    {% endif %}
    SAVE_GCODE_STATE NAME=state_move_y
    G90
    G1 Y{pos} F4800
    RESTORE_GCODE_STATE NAME=state_move_y
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __move_z]
type: input
address: 0x2022
data_type: int16
script:
  {% if "z" not in printer.toolhead.homed_axes %}
    {% do set_message("Homing required") %}
  {% else %}
    {% set t5uid1 = printer.t5uid1 %}
    {% set pos = data|float / 1 ** 1 %}
    {% if pos < t5uid1.limits.z_min %}
      {% set pos = t5uid1.limits.z_min %}
    {% elif pos > t5uid1.limits.z_max %}
      {% set pos = t5uid1.limits.z_max %}
    {% endif %}
    SAVE_GCODE_STATE NAME=state_move_z
    G90
    G1 Z{pos} F900
    RESTORE_GCODE_STATE NAME=state_move_z
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __move_step]
type: input
address: 0x2023
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% set move_steps = get_variable("move_steps",
                                   t5uid1.constants.step_size_10) %}
  {% if move_steps == t5uid1.constants.step_size_10 %}
    {% set step = 10.0 %}
  {% elif move_steps == t5uid1.constants.step_size_1 %}
    {% set step = 1.0 %}
  {% elif move_steps == t5uid1.constants['step_size_0.1'] %}
    {% set step = 0.1 %}
  {% endif %}
  {% if data == t5uid1.constants['move_x+'] %}
    {% set axis = "x" %}
    {% set pos = printer.gcode_move.gcode_position.x + step %}
    {% set speed = 4800 %}
  {% elif data == t5uid1.constants['move_x-'] %}
    {% set axis = "x" %}
    {% set pos = printer.gcode_move.gcode_position.x - step %}
    {% set speed = 4800 %}
  {% elif data == t5uid1.constants['move_y+'] %}
    {% set axis = "y" %}
    {% set pos = printer.gcode_move.gcode_position.y + step %}
    {% set speed = 4800 %}
  {% elif data == t5uid1.constants['move_y-'] %}
    {% set axis = "y" %}
    {% set pos = printer.gcode_move.gcode_position.y - step %}
    {% set speed = 4800 %}
  {% elif data == t5uid1.constants['move_z+'] %}
    {% set axis = "z" %}
    {% set pos = printer.gcode_move.gcode_position.z + step %}
    {% set speed = 900 %}
  {% elif data == t5uid1.constants['move_z-'] %}
    {% set axis = "z" %}
    {% set pos = printer.gcode_move.gcode_position.z - step %}
    {% set speed = 900 %}
  {% endif %}
  {% if axis not in printer.toolhead.homed_axes %}
    {% do set_message("Homing required") %}
  {% else %}
    {% if pos < t5uid1.limits[axis ~ "_min"] %}
      {% set pos = t5uid1.limits[axis ~ "_min"] %}
    {% elif pos > t5uid1.limits[axis ~ "_max"] %}
      {% set pos = t5uid1.limits[axis ~ "_max"] %}
    {% endif %}
    SAVE_GCODE_STATE NAME=state_move_step
    G90
    G1 {axis|upper}{pos} F{speed}
    RESTORE_GCODE_STATE NAME=state_move_step
    {% do start_routine("trigger_full_update") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __move_set_step]
type: input
address: 0x2024
data_type: uint16
script:
  {% do set_variable("move_steps", data) %}
  {% do start_routine("trigger_full_update") %}

[t5uid1_var __settings2_extra]
type: input
address: 0x2028
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% if data == t5uid1.constants.extra_button1 %}
      {% if t5uid1.has_bltouch %}
        {% if is_busy() %}
          {% do set_message("Busy") %}
        {% else %}
          {% do start_routine("reset_bltouch") %}
        {% endif %}
      {% else %}
        {% do switch_page("info") %}
      {% endif %}
  {% elif data == t5uid1.constants.extra_button2 %}
    {% if t5uid1.has_bltouch %}
      {% do switch_page("info") %}
    {% endif %}
  {% endif %}

[t5uid1_var __pid_select]
type: input
address: 0x2029
data_type: int16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% if data == t5uid1.constants.heater_bed %}
    {% do set_variable("pid_temp", t5uid1.constants.temp_pla.bed) %}
    {% do set_variable("pid_heater", data) %}
  {% elif data == t5uid1.constants.heater_h0 %}
    {% do set_variable("pid_temp", t5uid1.constants.temp_pla.hotend) %}
    {% do set_variable("pid_heater", data) %}
  {% elif data == t5uid1.constants.heater_h1 %}
    {% do set_variable("pid_temp", t5uid1.constants.temp_pla.hotend) %}
    {% do set_variable("pid_heater", data) %}
  {% endif %}
  {% do start_routine("trigger_full_update") %}

[t5uid1_var __pid_set_temp]
type: input
address: 0x202a
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% set pid_heater = get_variable("pid_heater",
                                   t5uid1.constants.heater_h0) %}
  {% if pid_heater == t5uid1.constants.heater_bed %}
    {% set min_temp = heater_min_temp("heater_bed")|round|int %}
    {% set max_temp = heater_max_temp("heater_bed", 10)|round|int %}
  {% elif pid_heater == t5uid1.constants.heater_h0 %}
    {% set min_temp = heater_min_temp("extruder")|round|int %}
    {% set max_temp = heater_max_temp("extruder", 15)|round|int %}
  {% elif pid_heater == t5uid1.constants.heater_h1 %}
    {% set min_temp = heater_min_temp("extruder1")|round|int %}
    {% set max_temp = heater_max_temp("extruder1", 15)|round|int %}
  {% endif %}
  {% do set_variable("pid_temp", [([data, max_temp]|min), min_temp]|max) %}
  {% do start_routine("trigger_full_update") %}

[t5uid1_var __pid_run]
type: input
address: 0x202b
data_type: none
script:
  {% if is_busy() %}
    {% do set_message("Busy") %}
  {% else %}
    {% set t5uid1 = printer.t5uid1 %}
    {% set pid_heater = get_variable("pid_heater",
                                     t5uid1.constants.heater_h0) %}
    {% set pid_temp = get_variable("pid_temp",
                                   t5uid1.constants.temp_pla.hotend) %}
    {% do set_variable("line1", "") %}
    {% do set_variable("line2", "PID autotuning...") %}
    {% do set_variable("line3", "") %}
    {% do set_variable("line4", "") %}
    {% do set_variable("wait_return", "pid") %}
    {% do set_variable("wait_return_sound", t5uid1.notification_sound) %}
    {% if pid_heater == t5uid1.constants.heater_bed %}
      PID_CALIBRATE HEATER=heater_bed TARGET={pid_temp}
    {% elif pid_heater == t5uid1.constants.heater_h0 %}
      PID_CALIBRATE HEATER=extruder TARGET={pid_temp}
    {% elif pid_heater == t5uid1.constants.heater_h1 %}
      {% if 'extruder1' in printer %}
        PID_CALIBRATE HEATER=extruder1 TARGET={pid_temp}
      {% endif %}
    {% endif %}
    {% do start_routine("show_wait_screen") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __save_config]
type: input
address: 0x2030
data_type: none
script:
  {% if is_busy() %}
    {% do set_message("Busy") %}
  {% else %}
    {% do set_variable("line1", "") %}
    {% do set_variable("line2", "Saving configuration...") %}
    {% do set_variable("line3", "") %}
    {% do set_variable("line4", "") %}
    {% do set_variable("wait_return", "boot") %}
    SAVE_CONFIG
    {% do start_routine("show_wait_screen") %}
  {% endif %}
run_as_gcode: true

[t5uid1_var __fan_speed]
type: input
address: 0x4000
data_type: uint16
script:
  {% if data >= 0 and data <= 100 %}
    M106 S{(data|float / 100 * 255)|round|int}
  {% endif %}
run_as_gcode: true

[t5uid1_var __volume]
type: input
address: 0x4022
data_type: uint16
script:
  {% if data >= 0 and data <= 100 %}
    {% do set_volume(data) %}
  {% endif %}

[t5uid1_var __brightness]
type: input
address: 0x4023
data_type: uint16
script:
  {% if data >= 0 and data <= 100 %}
    {% do set_brightness(data) %}
  {% endif %}

[t5uid1_var __debug]
type: input
address: 0x5001
data_type: none
script:
  {% set counter = get_variable("debug_count", 0)|int + 1 %}
  {% do set_variable("debug_count", counter) %}
  {% if counter >= 10 %}
    {% do switch_page("debug1") %}
  {% endif %}
